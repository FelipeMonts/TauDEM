head(MergedRiver.To.points)
str(MergedRiver.To.points)
MergedRiver.Line.Point<-merge(MergedRiver.From.points,MergedRiver.To.points,by="Line.ID");
head(MergedRiver.Line.Point)
str(MergedRiver.Line.Point)
head(MergedRiver.Unique.Point.coords) ;
str(MergedRiver.Unique.Point.coords);
head(River.Nodes.Elevation) ;
str(River.Nodes.Elevation) ;
Refined.Merged.Nodes<-merge(River.Nodes.Elevation, MergedRiver.Unique.Point.coords, by=c('X', 'Y'),all.x=T) ;
head(Refined.Merged.Nodes)
str(Refined.Merged.Nodes)
summary(Refined.Merged.Nodes)
g.River.2.edges<-MergedRiver.Line.Point[,c("Point.ID.x", "Point.ID.y" , "Line.ID") ] ;
g.River.2.edges<-g.River.2.edges[order(g.River.2.edges$Line.ID),] ;
head(g.River.2.edges,20)
g.River.2.vertices<-Refined.Merged.Nodes[, c('Index', 'X', 'Y','Zmax', 'Point.ID') ] ;
head(g.River.2.vertices)
g.River.2<-graph.data.frame(g.River.2.edges, vertices=g.River.2.vertices, directed = T) ;
str(g.River.2);
plot(g.River.2, layout=layout_nicely,vertex.size= 1, edge.arrow.size=0.1, vertex.label=NA)
tkplot(g.River.2, canvas.width=1800, canvas.height=900, layout=layout_nicely ,vertex.size= 2, edge.arrow.size=0.1, vertex.label=NA)
is.simple(g.River.2)
E(graph.data.frame)
degree(g.River.2, mode="in")
which(degree(g.River.2) == 0)
degree(g.River.2, mode="out")
which(degree(g.River.2, mode="out") == 2)
V(g.River.2)[is.na(Point.ID)]$color='Blue'
V(g.River.2)[!is.na(Point.ID)]$color='Red'
tkplot(g.River.2, canvas.width=1800, canvas.height=900, layout=layout_nicely ,vertex.size= 2, edge.arrow.size=0.1, vertex.label=g.River.2.vertices$Index, vertex.label.cex=1, vertex.label.dist=1)   ;
tkplot(g.River.2, canvas.width=1800, canvas.height=900, layout=layout_nicely ,vertex.size= 2, edge.arrow.size=0.5, vertex.label=paste(g.River.2.vertices$Index,round(g.River.2.vertices$Zmax,2),sep="-"), vertex.label.cex=1, vertex.label.dist=1) ;
g.River.sub<-induced.subgraph(g.River.2,seq(1,30)) ;
V(g.River.sub)[is.na(Point.ID)]$color='Blue'
V(g.River.sub)[!is.na(Point.ID)]$color='Red'
tkplot(g.River.sub, canvas.width=1800, canvas.height=900, layout=layout_nicely ,vertex.size= 2, edge.arrow.size=1.0,vertex.label=paste(V(g.River.sub)$name,round(V(g.River.sub)$Zmax,2),sep="-"),vertex.label.cex=1, vertex.label.dist=1,margin=0.2) ;
str(g.River.sub)
V(g.River.sub)$name
list.vertex.attributes(g.River.sub)
list.edge.attributes(g.River.sub)
Edgs<-as_data_frame(g.River.2, what=c("edges"));
Vertcs<-as_data_frame(g.River.2, what=c("vertices"))
from.Vertcs<-merge(Edgs, Vertcs, by.x="from", by.y="name", all.x=T ) ;
to.Vertcs<-merge(Edgs, Vertcs, by.x="to", by.y="name", all.x=T ) ;
Edgs.Zmax<-merge(from.Vertcs, to.Vertcs, by="Line.ID") ;
Edgs.Zmax$Elev.Dif<-Edgs.Zmax$Zmax.x-Edgs.Zmax$Zmax.y ;
head(Edgs.Zmax)
g.River.3.edges<-merge(Edgs,Edgs.Zmax, by="Line.ID")[,c("from" , "to" , "Line.ID" , "from.x" , "to.x" , "X.x" , "Y.x" , "Zmax.x" , "Point.ID.x" , "to.y" , "from.y" , "X.y" , "Y.y" , "Zmax.y" , "Point.ID.y" ,"Elev.Dif"  )] ;
names(g.River.3.edges)
g.River.3<-graph.data.frame(g.River.3.edges, vertices=g.River.2.vertices, directed = T) ;
V(g.River.3)[is.na(Point.ID)]$color='Blue'
V(g.River.3)[!is.na(Point.ID)]$color='Red'
edge_attr(g.River.3, 'Elev.Dif'))
tkplot(g.River.3, canvas.width=1800, canvas.height=900, layout=layout_nicely ,vertex.size= 2, edge.arrow.size=0.5, vertex.label=g.River.2.vertices$Index, vertex.label.cex=1, vertex.label.dist=1, edge.label=round(g.River.3.edges$Elev.Dif,2), edge.label.cex=1)  ;
tkplot(graph.data.frame(g.River.3.edges[g.River.3.edges$Elev.Dif<0,]),canvas.width=1800, canvas.height=900, layout=layout_nicely ,vertex.size= 2, edge.arrow.size=0.5,vertex.label=g.River.2.vertices$Index, vertex.label.cex=1, vertex.label.dist=1, edge.label=round(g.River.3.edges$Elev.Dif,2), edge.label.cex=1)
g.River.3.sub-subgraph.edges(g.River.3,eids=which(E(g.River.3)$Elev.Dif < 0 ));
g.River.3.sub<-subgraph.edges(g.River.3,eids=which(E(g.River.3)$Elev.Dif < 0 ));
g.River.3.sub.data<-as_long_data_frame(g.River.3.sub) ;
g.River.3.sub.data
g.River.3.sub.data<-as_long_data_frame(g.River.3.sub) ;
tkplot(g.River.3.sub,canvas.width=1800, canvas.height=900, layout=layout_nicely ,vertex.label=g.River.3.sub.data$Point.ID.x, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, vertex.label.dist=1, edge.label=round(g.River.3.sub.data$Elev.Dif,3),edge.label.cex=1) ;
V(g.River.3.sub)
vertex.attributes(g.River.3.sub)
V(g.River.3.sub)$name
tkplot(g.River.3.sub,canvas.width=1800, canvas.height=900, layout=layout_nicely ,V(g.River.3.sub)$name, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, vertex.label.dist=1, edge.label=round(g.River.3.sub.data$Elev.Dif,3),edge.label.cex=1) ;
V(g.River.3.sub)
str(V(g.River.3.sub))
V(g.River.3.sub)$name
make_ego_graph(g.River.3.sub,3,V(g.River.3.sub), mode=c("all"))
g.River.4.sub<-make_ego_graph(g.River.3.sub,3,V(g.River.3.sub), mode=c("all"))
as_long_data_frame(g.River.4.sub)
g.River.4.sub<-make_ego_graph(g.River.3.sub,3,V(g.River.3.sub), mode=c("all"))
as_long_data_frame(g.River.4.sub)
g <- make_ring(10)
g <- connect(g, 2)
tkplot(g)
g <- make_ring(10)
g <- make_ring(10)
tkplot(g)
as_long_data_frame(g.River.4.sub)[1]
as_long_data_frame(g.River.4.sub)[[1]]
as_long_data_frame(g.River.4.sub[[1]])
str(g.River.4.sub)
V(g.River.3.sub)
g.River.4.sub<-make_ego_graph(g.River.3.sub,4,V(g.River.3.sub), mode=c("all"))
as_long_data_frame(g.River.4.sub[[1]])
V(g.River.4.sub[[1]])
g.River.4.sub<-make_ego_graph(g.River.3,4,V(g.River.3.sub), mode=c("all"))
g <- make_ring(10)
as_ids(V(g))
as_ids(E(g))
V(g)$name <- letters[1:10]
as_ids(V(g))
as_ids(E(g))
g.River.4.sub<-make_ego_graph(g.River.3,4,as.ids(V(g.River.3.sub)), mode=c("all"))
g.River.4.sub<-make_ego_graph(g.River.3,4,as_ids(V(g.River.3.sub)), mode=c("all"))
V(g.River.4.sub[[1]])
tkplot(g.River.4.sub[1],canvas.width=1800, canvas.height=900, layout=layout_nicely ,V(g.River.4.sub[[1]])$name, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, vertex.label.dist=1,edge.label.cex=1) ;
g.River.4.sub[1]
tkplot(g.River.4.sub[1])
V(g)$name <- c("a", "b", "c", "d", "e", "f", "g", "h", "i", "j")
make_ego_graph(g, 2, 1:3)
make_ego_graph(g, 2, 1:3)[[1]]
tkplot(make_ego_graph(g, 2, 1:3)[[1]])
g.River.4.sub<-make_ego_graph(g.River.3,4,as_ids(V(g.River.3.sub)), mode=c("all"))
V(g.River.4.sub[[1]])
tkplot(g.River.4.sub[1],canvas.width=1800, canvas.height=900, layout=layout_nicely ,V(g.River.4.sub[[1]])$name, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, vertex.label.dist=1,edge.label.cex=1) ;
tkplot(g.River.4.sub[[1]],canvas.width=1800, canvas.height=900, layout=layout_nicely ,V(g.River.4.sub[[1]])$name, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, vertex.label.dist=1,edge.label.cex=1) ;
as_long_data_frame(g.River.4.sub[[1]])
tkplot(g.River.4.sub[[1]],canvas.width=1800, canvas.height=900, layout=layout_nicely ,V(g.River.4.sub[[1]])$name, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, edge.label=round(E(g.River.4.sub[[1]]$Elev.Dif,3))vertex.label.dist=1,edge.label.cex=1) ;
round(E(g.River.4.sub[[1]])$Elev.Dif,3)
tkplot(g.River.4.sub[[1]],canvas.width=1800, canvas.height=900, layout=layout_nicely ,V(g.River.4.sub[[1]])$name, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, edge.label=round(E(g.River.4.sub[[1]])$Elev.Dif,3)vertex.label.dist=1,edge.label.cex=1) ;
E(g.River.4.sub[[1]])
E(g.River.4.sub[[1]])$Elev.Dif
E(g.River.4.sub[[1]])$Elev.Dif
round(E(g.River.4.sub[[1]])$Elev.Dif,3)
tkplot(g.River.4.sub[[1]],canvas.width=1800, canvas.height=900, layout=layout_nicely ,V(g.River.4.sub[[1]])$name, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, edge.label=round(E(g.River.4.sub[[1]])$Elev.Dif,3),vertex.label.dist=1,edge.label.cex=1) ;
g.River.4.sub<-make_ego_graph(g.River.3,3,as_ids(V(g.River.3.sub)), mode=c("all"))
g.River.4.sub<-make_ego_graph(g.River.3,3,as_ids(V(g.River.3.sub)), mode=c("all"))
V(g.River.4.sub[[2]])
as_long_data_frame(g.River.4.sub[[1]])
tkplot(g.River.4.sub[[1]],canvas.width=1800, canvas.height=900, layout=layout_nicely ,V(g.River.4.sub[[1]])$name, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, edge.label=round(E(g.River.4.sub[[1]])$Elev.Dif,3),vertex.label.dist=1,edge.label.cex=1) ;
tkplot(g.River.4.sub[[2]],canvas.width=1800, canvas.height=900, layout=layout_nicely ,V(g.River.4.sub[[2]])$name, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, edge.label=round(E(g.River.4.sub[[2]])$Elev.Dif,3),vertex.label.dist=1,edge.label.cex=1) ;
tkplot(g.River.4.sub[[3]],canvas.width=1800, canvas.height=900, layout=layout_nicely ,V(g.River.4.sub[[3]])$name, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, edge.label=round(E(g.River.4.sub[[3]])$Elev.Dif,3),vertex.label.dist=1,edge.label.cex=1) ;
g.River.4.sub<-make_ego_graph(g.River.3,2,as_ids(V(g.River.3.sub)), mode=c("all"))  ;
g.River.4.sub<-make_ego_graph(g.River.3,2,as_ids(V(g.River.3.sub)), mode=c("all"))  ;
V(g.River.4.sub[[3]])
as_long_data_frame(g.River.4.sub[[3]])
tkplot(g.River.4.sub[[3]],canvas.width=1800, canvas.height=900, layout=layout_nicely ,V(g.River.4.sub[[3]])$name, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, edge.label=round(E(g.River.4.sub[[3]])$Elev.Dif,3),vertex.label.dist=1,edge.label.cex=1) ;
tkplot(g.River.4.sub[[1]],canvas.width=1800, canvas.height=900, layout=layout_nicely ,V(g.River.4.sub[[1]])$name, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, edge.label=round(E(g.River.4.sub[[1]])$Elev.Dif,3),vertex.label.dist=1,edge.label.cex=1) ;
tkplot(g.River.4.sub[[2]],canvas.width=1800, canvas.height=900, layout=layout_nicely ,V(g.River.4.sub[[2]])$name, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, edge.label=round(E(g.River.4.sub[[2]])$Elev.Dif,3),vertex.label.dist=1,edge.label.cex=1) ;
dim(g.River.4.sub)
str(g.River.4.sub)
lenght(g.River.4.sub)
length(g.River.4.sub)
.libPaths("C:/Felipe/SotwareANDCoding/R_Library/library")  ;
install.packages('RCurl');
install.packages('rgdal');
install.packages('GSIF');
install.packages('raster');
install.packages('plotKML');
install.packages('XML');
install.packages('lattice');
install.packages('aqp');
install.packages('soiltexturep');
if(.Platform$OS.type == "windows")
if(.Platform$OS.type == "windows")
.Platform$OS.type
## (a) FTP download:
## location of soilgrids:
sg.ftp <- "ftp://ftp.soilgrids.org/data/recent/"
library(RCurl)
library(rgdal)
library(GSIF)
library(raster)
library(plotKML)
library(XML)
library(lattice)
library(aqp)
library(soiltexture)
## (a) FTP download:
## location of soilgrids:
sg.ftp <- "ftp://ftp.soilgrids.org/data/recent/"
getURL(sg.ftp, ftp.use.epsv = FALSE, dirlistonly = TRUE)
library(XML)
library(RCurl)
install.packages('RCurl',dependencies = T);
filenames = getURL(sg.ftp, ftp.use.epsv = FALSE, dirlistonly = TRUE)
library(RCurl)
install.packages('RCurl',dependencies = T);
.libPaths("C:/Felipe/SotwareANDCoding/R_Library/library")  ;
install.packages('RCurl',dependencies = T);
library(RCurl)
getURL(sg.ftp, ftp.use.epsv = FALSE, dirlistonly = TRUE)
library(RCurl)
library("RCurl", lib.loc="C:/Felipe/SotwareANDCoding/R_Library/library")
install.packages('bitops','RCurl',dependencies = T);
.libPaths("C:/Felipe/SotwareANDCoding/R_Library/library")  ;
install.packages('bitops','RCurl',dependencies = T);
library(RCurl)
.libPaths("C:/Felipe/SotwareANDCoding/R_Library/library")  ;
.libPaths("C:/Felipe/SotwareANDCoding/R_Library/library")  ;
library(RCurl)
library(rgdal)
library(GSIF)
library(raster)
library(plotKML)
library(XML)
library(lattice)
library(aqp)
library(soiltexture)
## GDAL paths:
if(.Platform$OS.type == "windows"){
gdal.dir <- shortPathName("C:/Program files/GDAL")
gdal_translate <- paste0(gdal.dir, "/gdal_translate.exe")
gdalwarp <- paste0(gdal.dir, "/gdalwarp.exe")
gdalinfo <- paste0(gdal.dir, "/gdalinfo.exe")
} else {
gdal_translate = "gdal_translate"
gdalwarp = "gdalwarp"
gdalinfo = "gdalinfo"
}
# ##-----------------------------------
# ## Accessing data
# ##-----------------------------------
#
# ## (a) FTP download:
# ## location of soilgrids:
# sg.ftp <- "ftp://ftp.soilgrids.org/data/recent/"
# filenames = getURL(sg.ftp, ftp.use.epsv = FALSE, dirlistonly = TRUE)
# filenames = strsplit(filenames, "\r*\n")[[1]]
# filenames[1:5]
#
# ## download to a local directory:
# ORC.name <- filenames[grep(filenames, pattern=glob2rx("ORCDRC_M_sl1_250m_ll.tif$"))]
# ORC.name
# try(download.file(paste(sg.ftp, ORC.name, sep=""), ORC.name))
# ## 2.8GB Geotiff!!
#
# ## check that everything is OK:
# GDALinfo(ORC.name)
#
# ## We focus on Ghana
# wg.url <- url("http://gsif.isric.org/lib/exe/fetch.php?media=admin.af.rda")
# load(wg.url)
# proj4string(admin.af) <- "+proj=longlat +datum=WGS84"
# country.af <- as(admin.af, "SpatialLines")
# ## Ghana bounding box:
# ghana <- admin.af[admin.af$FORMAL_EN=="Republic of Ghana",]
# ghana@bbox
#
# ## load soil Africa Soil Profile DB:
# data(afsp)
# sites <- afsp$sites
# coordinates(sites) <- ~ LONWGS84 + LATWGS84
# proj4string(sites) <- "+proj=longlat +datum=WGS84"
# #af.csy = "+proj=laea +lat_0=5 +lon_0=20 +x_0=0 +y_0=0 +units=m +ellps=WGS84 +datum=WGS84"
# #sites.af <- spTransform(sites, CRS(af.csy))
#
# ## plot country and profiles
# plot(ghana, col="red", lwd=2, asp=1)
# lines(country.af)
# points(sites, pch="+")
# ## in local projection system:
# #ghana.xy <- spTransform(ghana, CRS(af.csy))
# #ghana.xy@bbox
#
# ## get only Ghana:
# te = as.vector(ghana@bbox)
# unlink("ORC_sl1_Ghana.tif")
# system(paste0(gdalwarp, ' ', ORC.name, ' ORC_sl1_Ghana.tif -te ', paste(te, collapse=" ")))
# ORCDRC_sl1_ghana <- readGDAL("ORC_sl1_Ghana.tif")
# plot(log1p(raster(ORCDRC_sl1_ghana)), col=SAGA_pal[[1]])
#### This Seems the most efficient way to extract the soils from Kyrgyzstan #######
## (b) Web Coverage Service
## location of service:
# wcs = "http://webservices.isric.org/geoserver/wcs?"
# ## create an XML file:
# l1 <- newXMLNode("WCS_GDAL")
# l1.s <- newXMLNode("ServiceURL", wcs, parent=l1)
# l1.l <- newXMLNode("CoverageName", "orcdrc_m_sl1_250m", parent=l1)
# l1
# xml.out = "ORCDRC_M_sl1.xml"
# saveXML(l1, file=xml.out)
# ## check if the layer exists:
# system(paste(gdalinfo, xml.out))
## Alternative: calculate offset and region dims:
###### Get the bounding box region for Kyrgyzstan and then get the raster files for this sections######
ContryPolygonInfo<-ogrInfo("C:/Felipe/PIHM-CYCLES/PIHM/Soils/ISRICWorldSoils/KyrgyzstanPolygonWGS84.shp") ;
raster(system.file("https://files.isric.org/soilgrids/data/recent/ACDWRB_M_ss_250m_ll.tif", package="raster"))
raster(system.file("external/test.grd", package="raster"))
system.file("https://files.isric.org/soilgrids/data/recent/ACDWRB_M_ss_250m_ll.tif")
Bounding.box
ContryPolygonInfo<-ogrInfo("C:/Felipe/PIHM-CYCLES/PIHM/Soils/ISRICWorldSoils/KyrgyzstanPolygonWGS84.shp") ;
Bounding.box<-ContryPolygonInfo$extent;
Bounding.box
install.packages("jsonlite")
require(jsonlite)
coords <- c(45.5, 37.8)
fromJSON(paste0('https://rest.soilgrids.org/query?lon=',coords[1],'&lat=',coords[2],',&attributes=BLDFIE,SLTPPT,SNDPPT,CLYPPT'), flatten = TRUE)
install.packages(c("stringr", "XLConnect"))
.libPaths("C:/Felipe/SotwareANDCoding/R_Library/library")  ;
install.packages("randomForest")
data(iris)
set.seed(111)
ind <- sample(2, nrow(iris), replace = TRUE, prob=c(0.8, 0.2))
ind
View(iris)
View(iris)
nrow(iris)
iris.rf <- randomForest(Species ~ ., data=iris[ind == 1,])
library(randomForest)
data(iris)
set.seed(111)
ind <- sample(2, nrow(iris), replace = TRUE, prob=c(0.8, 0.2))
iris.rf <- randomForest(Species ~ ., data=iris[ind == 1,])
iris.pred <- predict(iris.rf, iris[ind == 2,])
iris[ind == 2,]
iris.pred
iris[ind == 1,]
iris.pred
View(iris)
View(iris)
table(observed = iris[ind==2, "Species"], predicted = iris.pred)
install.packages("rgdal")
install.packages("raster")
install.packages("shapefiles")
#  Tell the program where the package libraries are  #####################
.libPaths("C:/Felipe/SotwareANDCoding/R_Library/library")  ;
#      set the working directory
#setwd("C:\\Felipe\\PIHM-CYCLES\\PIHM\\TauDEM\\TauDEM\\HalfMoon")
setwd("C:\\Felipe\\PIHM-CYCLES\\PIHM\\TauDEM\\TauDEM\\LoganDemo\\Logan")
# Install the packages that are needed #
###  load the libraries that are neded -- need to filter some of these  ---
#  R script to run TauDEM
# Packages used
# install rgdal
# install raster
# install shapefiles
# install.packages("rgdal")
# install.packages("raster")
# install.packages("shapefiles")
# This also assumes that MPICH2 is properly installed on your machine and that TauDEM command line executables exist
# MPICH2.  Obtain from http://www.mcs.anl.gov/research/projects/mpich2/
# Install following instructions at http://hydrology.usu.edu/taudem/taudem5.0/downloads.html.
# It is important that you install this from THE ADMINISTRATOR ACCOUNT.
# TauDEM command line executables.
# If on a PC download from http://hydrology.usu.edu/taudem/taudem5.0/downloads.html
# The install package will install to c:\program files\taudem or c:\program files (x86)\taudem set a
# system path.  If you want to do this manually you can download the command line executables and place where you wish.
# If on a different system, download the source code and compile for your system.
library(raster)
library(shapefiles)
# Set working directory to your location
#setwd("C:/Users/dtarb/Scratch/Logan")
setwd("C:\\Felipe\\PIHM-CYCLES\\PIHM\\TauDEM\\TauDEM\\LoganDemo\\Logan")
z=raster("logan.tif")
plot(z)
# Pitremove
system("mpiexec -n 8 pitremove -z logan.tif -fel loganfel.tif")
fel=raster("loganfel.tif")
plot(fel)
# D8 flow directions
system("mpiexec -n 8 D8Flowdir -p loganp.tif -sd8 logansd8.tif -fel loganfel.tif",show.output.on.console=F,invisible=F)
p=raster("loganp.tif")
plot(p)
# DInf flow directions
system("mpiexec -n 8 DinfFlowdir -ang loganang.tif -slp loganslp.tif -fel loganfel.tif",show.output.on.console=F,invisible=F)
ang=raster("loganang.tif")
plot(ang)
slp=raster("loganslp.tif")
plot(slp)
# Grid Network
system("mpiexec -n 8 Gridnet -p loganp.tif -gord logangord.tif -plen loganplen.tif -tlen logantlen.tif")
gord=raster("logangord.tif")
plot(gord)
# Dinf contributing area
system("mpiexec -n 8 AreaDinf -ang loganang.tif -sca logansca.tif")
sca=raster("logansca.tif")
plot(sca)
# Threshold
system("mpiexec -n 8 Threshold -ssa loganad8.tif -src logansrc.tif -thresh 8777")
src=raster("logansrc.tif")
plot(src)
# Grid Network
system("mpiexec -n 8 Gridnet -p loganp.tif -gord logangord.tif -plen loganplen.tif -tlen logantlen.tif")
gord=raster("logangord.tif")
plot(gord)
system("mpiexec -n 8 AreaDinf -ang loganang.tif -sca logansca.tif")
sca=raster("logansca.tif")
plot(sca)
zoom(log(sca))
# Threshold
system("mpiexec -n 8 threshold -ssa loganssa.tif -src logansrc1.tif -thresh 2000")
src1=raster("logansrc1.tif")
plot(src1)
plot(p)
plot(sd8)
sd8=raster("logansd8.tif")
plot(sd8)
# Contributing area
system("mpiexec -n 8 AreaD8 -p loganp.tif -ad8 loganad8.tif")
ad8=raster("loganad8.tif")
plot(ad8)
plot(sd8)
plot(p, title="p")
plot(p, main="p")
plot(z, main="raster")
plot(fel,main="fel-PitRemove")
plot(p, main="p")
plot(sd8)
plot(p, main="p-FlowDir")
plot(sd8, main="Sd8")
plot(sd8, main="Sd8-FlowDirSlope")
# Contributing area
system("mpiexec -n 8 AreaD8 -p loganp.tif -ad8 loganad8.tif")
ad8=raster("loganad8.tif")
plot(ad8)
plot(ad8, main="ad8-FlowAcc")
# Threshold
system("mpiexec -n 8 Threshold -ssa loganad8.tif -src logansrc.tif -thresh 8777")
src=raster("logansrc.tif")
plot(src)
plot(src, main="Threshold)
plot(src, main="Threshold")
# Grid Network
system("mpiexec -n 8 Gridnet -p logansrc.tif -gord logangord.tif -plen loganplen.tif -tlen logantlen.tif")
gord=raster("logangord.tif")
plot(gord)
# DInf flow directions
system("mpiexec -n 8 DinfFlowdir -ang loganang.tif -slp loganslp.tif -fel loganfel.tif",show.output.on.console=F,invisible=F)
ang=raster("loganang.tif")
plot(ang)
slp=raster("loganslp.tif")
plot(slp)
# Dinf contributing area
system("mpiexec -n 8 AreaDinf -ang loganang.tif -sca logansca.tif")
sca=raster("logansca.tif")
plot(sca)
# DInf flow directions
system("mpiexec -n 8 DinfFlowdir -ang loganang.tif -slp loganslp.tif -fel loganfel.tif",show.output.on.console=F,invisible=F)
ang=raster("loganang.tif")
plot(ang)
plot(ang, main="Dinf-ang ; FlowDir")
slp=raster("loganslp.tif")
plot(slp)
plot(slp,main="Dinf-slp ; FlowDirSlope")
# Dinf contributing area
system("mpiexec -n 8 AreaDinf -ang loganang.tif -sca logansca.tif")
sca=raster("logansca.tif")
plot(sca)
plot(sca, main="Dinf-sca ; FlowAcc")
# Threshold
system("mpiexec -n 8 Threshold -ssa logansca.tif -src logansrc.tif -thresh 8777")
src=raster("logansrc.tif")
plot(src, main="Threshold")
# Threshold
system("mpiexec -n 8 Threshold -ssa logansca.tif -src logansrc.tif -thresh 100")
src=raster("logansrc.tif")
plot(src, main="Threshold")
# Threshold
system("mpiexec -n 8 Threshold -ssa logansca.tif -src logansrc.tif -thresh 1000")
src=raster("logansrc.tif")
plot(src, main="Threshold")
# Threshold
system("mpiexec -n 8 Threshold -ssa logansca.tif -src logansrc.tif -thresh 10000")
src=raster("logansrc.tif")
plot(src, main="Threshold")
# Threshold
system("mpiexec -n 8 Threshold -ssa logansca.tif -src logansrc.tif -thresh 8777")
src=raster("logansrc.tif")
plot(src, main="Threshold")
# Threshold
system("mpiexec -n 8 Threshold -ssa logansca.tif -src logansrc.tif -thresh 8777")
src=raster("logansrc.tif")
plot(src, main="Threshold")
# DInf flow directions
system("mpiexec -n 8 DinfFlowdir -ang loganang.tif -slp loganslp.tif -fel loganfel.tif",show.output.on.console=F,invisible=F)
ang=raster("loganang.tif")
plot(ang, main="Dinf-ang ; FlowDir")
slp=raster("loganslp.tif")
plot(slp,main="Dinf-slp ; FlowDirSlope")
# Dinf contributing area
system("mpiexec -n 8 AreaDinf -ang loganang.tif -sca logansca.tif")
sca=raster("logansca.tif")
plot(sca, main="Dinf-sca ; FlowAcc")
# Threshold
system("mpiexec -n 8 Threshold -ssa logansca.tif -src logansrc.tif -thresh 0")
src=raster("logansrc.tif")
plot(src, main="Threshold")
# Threshold
system("mpiexec -n 8 Threshold -ssa logansca.tif -src logansrc.tif -thresh 100")
src=raster("logansrc.tif")
plot(src, main="Threshold")
# Threshold
system("mpiexec -n 8 Threshold -ssa logansca.tif -src logansrc.tif -thresh 1000")
src=raster("logansrc.tif")
plot(src, main="Threshold")
library(raster)
library(shapefiles)
# Set working directory to your location
#setwd("C:/Users/dtarb/Scratch/Logan")
setwd("C:\\Felipe\\PIHM-CYCLES\\PIHM\\TauDEM\\TauDEM\\LoganDemo\\Logan")
z=raster("logan.tif")
plot(z, main="raster")
# Pitremove
system("mpiexec -n 8 pitremove -z logan.tif -fel loganfel.tif")
fel=raster("loganfel.tif")
plot(fel,main="fel-PitRemove")
library(raster)
library(shapefiles)
# Set working directory to your location
#setwd("C:/Users/dtarb/Scratch/Logan")
setwd("C:\\Felipe\\PIHM-CYCLES\\PIHM\\TauDEM\\TauDEM\\LoganDemo\\Logan")
z=raster("logan.tif")
plot(z)
# Pitremove
system("mpiexec -n 8 pitremove -z logan.tif -fel loganfel.tif")
fel=raster("loganfel.tif")
plot(fel)
# D8 flow directions
system("mpiexec -n 8 D8Flowdir -p loganp.tif -sd8 logansd8.tif -fel loganfel.tif",show.output.on.console=F,invisible=F)
p=raster("loganp.tif")
plot(p)
sd8=raster("logansd8.tif")
plot(sd8)
# Contributing area
system("mpiexec -n 8 AreaD8 -p loganp.tif -ad8 loganad8.tif")
ad8=raster("loganad8.tif")
plot(log(ad8))
zoom(log(ad8))
zoom(log(ad8))
